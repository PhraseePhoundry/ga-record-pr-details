const winston = require('winston');
const colorizer = winston.format.colorize();

class phraseeLogger {
  static init(level = 'debug', colorizeLog = false) {
    // Constants used throught the module
    const CUSTOM_LOG_LEVELS = {
      LEVELS: {
        fatal: 0,
        error: 1,
        warn: 2,
        info: 3,
        debug: 4,
        trace: 5,
      },
      COLORS: {
        fatal: 'magenta',
        error: 'red',
        warn: 'blue',
        info: 'green',
        debug: 'yellow',
        trace: 'cyan',
      },
    };

    this.logger = winston.createLogger({
      levels: CUSTOM_LOG_LEVELS.LEVELS,
      transports: [
        new winston.transports.Console({
          level,
        }),
      ],
      format: winston.format.combine(
        winston.format.printf(msg => (colorizeLog ? colorizer.colorize(msg.level, `${JSON.stringify(msg.message)}`)
          : `${JSON.stringify(msg.message)}`)),
      ),
    });
    winston.addColors(CUSTOM_LOG_LEVELS.COLORS);
  }

  static fatal(inMsg) {
    const logMsg = inMsg;
    logMsg.level = 'fatal';
    logMsg.time = (new Date()).toISOString();
    this.logger.fatal(logMsg);
  }
    
  static error(inMsg) {
    const logMsg = inMsg;
    logMsg.level = 'error';
    logMsg.time = (new Date()).toISOString();
    this.logger.error(logMsg);
  }

  static warn(inMsg) {
    const logMsg = inMsg;
    logMsg.level = 'warn';
    logMsg.time = (new Date()).toISOString();
    this.logger.warn(logMsg);
  }

  static info(inMsg) {
    const logMsg = inMsg;
    logMsg.level = 'info';
    logMsg.time = (new Date()).toISOString();
    this.logger.info(logMsg);
  }

  static debug(inMsg) {
    const logMsg = inMsg;
    logMsg.level = 'debug';
    logMsg.time = (new Date()).toISOString();
    this.logger.debug(logMsg);
  }

  static trace(inMsg) {
    const logMsg = inMsg;
    logMsg.level = 'trace';
    logMsg.time = (new Date()).toISOString();
    this.logger.trace(logMsg);
  }
}

module.exports = phraseeLogger;